<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>shariarriday.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description></description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Functional Programming and Javascript</title>
	  <link>//functional-Programming-and-javascript</link>
	  <author></author>
	  <pubDate>2021-07-30T16:18:00+06:00</pubDate>
	  <guid>//functional-Programming-and-javascript</guid>
	  <description><![CDATA[
	     </br>
<p>Though there are many languages for many task there are only three possible paradigms of programming
</br></br><em>Structured, </em>
<em>Object Oriented and </em>
<em>Functional</em>
</br>
</br>
Each of the paradigms poses some sort of restriction on how to code. For example, structured programming restricts the
use of ‘goto’ statements. This article is not particularly about the restrictions posed by structured programming or
object oriented programming. Rather, this article wants to discuss what restrictions are posed by functional programming
paradigm and how these restrictions are maintained in a javascript code.
</p>

<h2 id="blockquotes">What is functional programming?</h2>

<blockquote>
    <p>In computer science, functional programming is a programming paradigm where programs are constructed by applying and
    composing functions. It is a declarative programming paradigm in which function definitions are trees of expressions
    that map values to other values, rather than a sequence of imperative statements which update the running state of the
    program.<cite>— <a href="https://en.wikipedia.org/wiki/Functional_programming">Wikipedia</a></cite></p>
</blockquote>

<p>
    We can not completely understand why this paradigm exist from this definition alone. So, let's take a simple scenario of squaring 
    the numbers in an array and try to compare between these paradigms.
</p>
<p>
We can solve this problem very easily using a for loop
</p>
<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">*</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span></code></pre></figure>

Or, we can create a Object and use that that object for a more reusable code.
<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">class</span> <span class="nx">squaringClass</span><span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">arr</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">square</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">arr</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">squaringObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">squaringClass</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">squaredArr</span> <span class="o">=</span> <span class="nx">squaringObject</span><span class="p">.</span><span class="nx">square</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">squaredArr</span><span class="p">);</span></code></pre></figure>

<p>
The first idea of functional programming is to divide our program into small and testable functions similar to how we construct classes in object oriented programming.
One quick glance and we can refactor our previous codes to include a function that takes a number and returns the square for us.
</p>
<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>

<span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> 
    <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">square</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span></code></pre></figure>

<p>
It looks as if we have decomposed the program to include as much function as possible. So, can we say that this program is following 
the functional programming paradigm fully ?
<br>
The answer is <em>'No'.</em>
</p>

<blockquote>
    The restriction posed by functional programming is in using the assignment operator. In another term, we don't change the values 
    of variables directly in a pure functional program.
</blockquote>

<p>
    How can we achieve our goal of squaring all the number of arrays without actually changing the values? Turns out javascript has 
    lots of function that can help with that. We will use <em>map</em> function and apply square function to each element of array
    individually. The built in map function does not change the values inside the array directly but rather creates a new variable 
    altogether. This all relates to the concept of <em>Immutability</em> in javascript and we can discuss it in depth in a future article.
</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">square</span><span class="p">(</span><span class="nx">item</span><span class="p">)));</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span></code></pre></figure>

<p>
In summary, instead of constructing classes to solve our problem and isolate our data, we create functions and avoid assiging new variables overriding the old ones.
</p>
	  ]]></description>
	</item>


</channel>
</rss>
